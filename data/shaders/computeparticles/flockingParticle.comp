#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Particle
{
	vec2 pos;
	vec2 vel;
};

// LOOK: These bindings correspond to the DescriptorSetLayouts and
// the DescriptorSets from prepareCompute()!

// Binding 0 : Particle storage buffer (read)
layout(std140, binding = 0) buffer ParticlesA
{
   Particle particlesA[ ];
};

// Binding 1 : Particle storage buffer (write)
layout(std140, binding = 1) buffer ParticlesB
{
   Particle particlesB[ ];
};

layout (local_size_x = 16, local_size_y = 16) in;

// LOOK: rule weights and distances, as well as particle count, based off uniforms.
// The deltaT here has to be updated every frame to account for changes in
// frame rate.
layout (binding = 2) uniform UBO
{
	float deltaT;
	float rule1Distance;
	float rule2Distance;
	float rule3Distance;
	float rule1Scale;
	float rule2Scale;
	float rule3Scale;
	int particleCount;
} ubo;

void main()
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ubo.particleCount)
		return;

    // Read position and velocity
	vec2 vPos = particlesA[index].pos.xy;
    vec2 vVel = particlesA[index].vel.xy;

    vec2 centerOfMass = vec2(0.0f, 0.0f); //rule 1
	vec2 keepAway     = vec2(0.0f, 0.0f); //rule 2
	vec2 neighborVels = vec2(0.0f, 0.0f); //rule 3

	float cnt1 = 0.0f;
	float cnt3 = 0.0f;

	for (int neighborIndex = 0; neighborIndex < ubo.particleCount; ++neighborIndex)
	{
		if (neighborIndex == index) continue;

		vec2 neighborPos = particlesA[neighborIndex].pos.xy;
		vec2 neighborVel = particlesA[neighborIndex].vel.xy;

		// Rule 1: boids fly towards their local perceived center of mass, which excludes themselves
		if (length(neighborPos - vPos) < ubo.rule1Distance)
		{
			centerOfMass = centerOfMass + neighborPos;
			cnt1 = cnt1 + 1.0f;
		}
		
		// Rule 2: boids try to stay a distance d away from each other
		if (length(neighborPos - vPos) < ubo.rule2Distance)
			keepAway = keepAway - (neighborPos - vPos);

		// Rule 3: boids try to match the speed of surrounding boids
		if (length(neighborPos - vPos) < ubo.rule3Distance)
		{
			neighborVels = neighborVels + neighborVel;
			cnt3 = cnt3 + 1.0f;
		}
	}

	//calculate averaged parameters
	if (cnt1 > 0.0f) 
		centerOfMass = centerOfMass / cnt1;
	
	centerOfMass = (centerOfMass - vPos) * ubo.rule1Scale;
	keepAway = keepAway * ubo.rule2Scale;
	neighborVels = neighborVels * ubo.rule3Scale;
	
	vVel = vVel + centerOfMass + keepAway + neighborVels;

	// clamp velocity for a more pleasing simulation.
	vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);

	// kinematic update
	vPos += vVel * ubo.deltaT;

    // Wrap around boundary
	if (vPos.x < -1.0) vPos.x = 1.0;
	if (vPos.x > 1.0) vPos.x = -1.0;
	if (vPos.y < -1.0) vPos.y = 1.0;
	if (vPos.y > 1.0) vPos.y = -1.0;

    particlesB[index].pos.xy = vPos;

    // Write back
    particlesB[index].vel.xy = vVel;
}